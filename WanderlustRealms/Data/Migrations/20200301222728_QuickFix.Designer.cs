// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WanderlustRealms.Data;

namespace WanderlustRealms.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200301222728_QuickFix")]
    partial class QuickFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WanderlustRealms.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Backgrounds.BackgroundSkill", b =>
                {
                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerBackgroundID")
                        .HasColumnType("int");

                    b.HasKey("SkillID", "PlayerBackgroundID");

                    b.HasIndex("PlayerBackgroundID");

                    b.ToTable("BackgroundSkills");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Backgrounds.PlayerBackground", b =>
                {
                    b.Property<int>("PlayerBackgroundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPlayable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerBackgroundID");

                    b.ToTable("PlayerBackgrounds");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Backgrounds.RaceBackground", b =>
                {
                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerBackgroundID")
                        .HasColumnType("int");

                    b.Property<int>("RaceBackgroundID")
                        .HasColumnType("int");

                    b.HasKey("RaceID", "PlayerBackgroundID");

                    b.HasIndex("PlayerBackgroundID");

                    b.ToTable("RaceBackgrounds");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanTake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowItWorksDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCursed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMagical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.ItemIdentified", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerCharacterID")
                        .HasColumnType("int");

                    b.HasKey("ItemID", "PlayerCharacterID");

                    b.HasIndex("PlayerCharacterID");

                    b.ToTable("ItemsIdentified");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Living.Living", b =>
                {
                    b.Property<int>("LivingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentHP")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodAlignment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxHP")
                        .HasColumnType("int");

                    b.Property<int>("MaxMP")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderAlignment")
                        .HasColumnType("int");

                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LivingID");

                    b.HasIndex("RaceID");

                    b.ToTable("Living");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Living");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.PlayerQuest", b =>
                {
                    b.Property<int>("PlayerCharacterID")
                        .HasColumnType("int");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.HasKey("PlayerCharacterID", "QuestID");

                    b.HasIndex("QuestID");

                    b.ToTable("PlayerQuests");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.Quest", b =>
                {
                    b.Property<int>("QuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoldReward")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillBonusPoints")
                        .HasColumnType("int");

                    b.Property<int?>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("XPReward")
                        .HasColumnType("int");

                    b.HasKey("QuestID");

                    b.HasIndex("SkillID");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.QuestBackgroundReq", b =>
                {
                    b.Property<int>("PlayerBackgroundID")
                        .HasColumnType("int");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.HasKey("PlayerBackgroundID", "QuestID");

                    b.HasIndex("QuestID");

                    b.ToTable("QuestBackgroundReqs");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.QuestRaceReq", b =>
                {
                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.HasKey("QuestID", "RaceID");

                    b.HasIndex("RaceID");

                    b.ToTable("QuestRaceReqs");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.Body", b =>
                {
                    b.Property<int>("BodyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BodyID");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.BodyLimbJoin", b =>
                {
                    b.Property<int>("LimbID")
                        .HasColumnType("int");

                    b.Property<int>("BodyID")
                        .HasColumnType("int");

                    b.HasKey("LimbID", "BodyID");

                    b.HasIndex("BodyID");

                    b.ToTable("BodyLimbJoins");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.Limb", b =>
                {
                    b.Property<int>("LimbID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanFly")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEnhancedUnarmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVital")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWieldable")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("LimbID");

                    b.ToTable("Limbs");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.Race", b =>
                {
                    b.Property<int>("RaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCha")
                        .HasColumnType("int");

                    b.Property<int>("MaxDex")
                        .HasColumnType("int");

                    b.Property<int>("MaxDur")
                        .HasColumnType("int");

                    b.Property<int>("MaxInt")
                        .HasColumnType("int");

                    b.Property<int>("MaxIntuit")
                        .HasColumnType("int");

                    b.Property<int>("MaxWill")
                        .HasColumnType("int");

                    b.Property<int>("MinCha")
                        .HasColumnType("int");

                    b.Property<int>("MinDex")
                        .HasColumnType("int");

                    b.Property<int>("MinDur")
                        .HasColumnType("int");

                    b.Property<int>("MinInt")
                        .HasColumnType("int");

                    b.Property<int>("MinIntuit")
                        .HasColumnType("int");

                    b.Property<int>("MinLightLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinWill")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("int");

                    b.Property<int>("StatPoints")
                        .HasColumnType("int");

                    b.HasKey("RaceID");

                    b.HasIndex("BodyID");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Role.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRessurectionPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemIDList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LightLevel")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NPCIDList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomAreaID")
                        .HasColumnType("int");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomAreaID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.RoomArea", b =>
                {
                    b.Property<int>("RoomAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPremium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomKingdomID")
                        .HasColumnType("int");

                    b.HasKey("RoomAreaID");

                    b.HasIndex("RoomKingdomID");

                    b.ToTable("RoomAreas");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.RoomExit", b =>
                {
                    b.Property<int>("RoomExitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentRoomID")
                        .HasColumnType("int");

                    b.Property<string>("ExitDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("TargetRoomID")
                        .HasColumnType("int");

                    b.HasKey("RoomExitID");

                    b.HasIndex("RoomID");

                    b.ToTable("RoomExits");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.RoomKingdom", b =>
                {
                    b.Property<int>("RoomKingdomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomKingdomID");

                    b.ToTable("RoomKingdoms");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Skills.RaceSkill", b =>
                {
                    b.Property<int>("RaceSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateModifier")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("StartingBonus")
                        .HasColumnType("int");

                    b.HasKey("RaceSkillID");

                    b.HasIndex("RaceID");

                    b.HasIndex("SkillID");

                    b.ToTable("RaceSkills");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Skills.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseLearnRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MaxGoodAlignment")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOrderAlignment")
                        .HasColumnType("int");

                    b.Property<int?>("MinGoodAlignment")
                        .HasColumnType("int");

                    b.Property<int?>("MinOrderAlignment")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedStat")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryStat")
                        .HasColumnType("int");

                    b.HasKey("SkillID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.Armor", b =>
                {
                    b.HasBaseType("WanderlustRealms.Models.Items.Item");

                    b.Property<int>("ArmorPoints")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimal")
                        .HasColumnType("bit");

                    b.Property<string>("LimbIDList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillBoost")
                        .HasColumnType("int");

                    b.Property<int?>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("StatBoost")
                        .HasColumnType("int");

                    b.Property<int>("StatToBoost")
                        .HasColumnType("int");

                    b.HasIndex("SkillID");

                    b.HasDiscriminator().HasValue("Armor");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.Weapon", b =>
                {
                    b.HasBaseType("WanderlustRealms.Models.Items.Item");

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.Property<int>("DamageConstant")
                        .HasColumnType("int");

                    b.Property<int>("DamageDice")
                        .HasColumnType("int");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<bool>("IsArtifact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimal")
                        .HasColumnName("Weapon_IsPrimal")
                        .HasColumnType("bit");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Living.NPC", b =>
                {
                    b.HasBaseType("WanderlustRealms.Models.Living.Living");

                    b.Property<bool>("CanWander")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAggressive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsQuestNPC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShopKeep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("NPC");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Living.PlayerCharacter", b =>
                {
                    b.HasBaseType("WanderlustRealms.Models.Living.Living");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PlayerBackgroundID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerCharacterID")
                        .HasColumnType("int");

                    b.Property<int>("RoomKingdomID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("XP")
                        .HasColumnType("int");

                    b.HasIndex("PlayerBackgroundID");

                    b.HasIndex("RoomKingdomID");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("PlayerCharacter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WanderlustRealms.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WanderlustRealms.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WanderlustRealms.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Backgrounds.BackgroundSkill", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Backgrounds.PlayerBackground", "Background")
                        .WithMany("BackgroundSkills")
                        .HasForeignKey("PlayerBackgroundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Backgrounds.RaceBackground", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Backgrounds.PlayerBackground", "PlayerBackground")
                        .WithMany()
                        .HasForeignKey("PlayerBackgroundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Races.Race", "Race")
                        .WithMany("RaceBackgrounds")
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.ItemIdentified", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Living.PlayerCharacter", "PlayerCharacter")
                        .WithMany("IdentifiedItems")
                        .HasForeignKey("PlayerCharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Living.Living", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Races.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.PlayerQuest", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Living.PlayerCharacter", "PlayerCharacter")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("PlayerCharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Quests.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.Quest", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.QuestBackgroundReq", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Backgrounds.PlayerBackground", "PlayerBackground")
                        .WithMany()
                        .HasForeignKey("PlayerBackgroundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Quests.Quest", "Quest")
                        .WithMany("PlayerBackgroundReq")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Quests.QuestRaceReq", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Quests.Quest", "Quest")
                        .WithMany("RaceRequirement")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Races.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.BodyLimbJoin", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Races.Body", "Body")
                        .WithMany("LimbJoin")
                        .HasForeignKey("BodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Races.Limb", "Limb")
                        .WithMany()
                        .HasForeignKey("LimbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Races.Race", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Races.Body", "Body")
                        .WithMany()
                        .HasForeignKey("BodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.Room", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Rooms.RoomArea", "RoomArea")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.RoomArea", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Rooms.RoomKingdom", "RoomKingdom")
                        .WithMany("RoomAreas")
                        .HasForeignKey("RoomKingdomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Rooms.RoomExit", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Rooms.Room", "CurrentRoom")
                        .WithMany("RoomExits")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Skills.RaceSkill", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Races.Race", "Race")
                        .WithMany("RaceSkills")
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderlustRealms.Models.Items.Armor", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID");
                });

            modelBuilder.Entity("WanderlustRealms.Models.Living.PlayerCharacter", b =>
                {
                    b.HasOne("WanderlustRealms.Models.Backgrounds.PlayerBackground", "Background")
                        .WithMany()
                        .HasForeignKey("PlayerBackgroundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.Rooms.RoomKingdom", "RoomKingdom")
                        .WithMany()
                        .HasForeignKey("RoomKingdomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderlustRealms.Models.ApplicationUser", "User")
                        .WithMany("PlayerCharacters")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
